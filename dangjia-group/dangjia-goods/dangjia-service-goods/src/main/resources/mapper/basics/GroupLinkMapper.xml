<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dangjia.acg.mapper.basics.IGroupLinkMapper">

   <resultMap id="GoodsCategoryMap" type="java.util.Map">
      <result column="id" property="id"></result>
      <result column="name" property="name"></result>
   </resultMap>
	<resultMap id="GoodsLinkMap" type="java.util.Map">
		<result column="id" property="id"></result>
		<result column="groupId" property="groupId"></result>
		<result column="productId" property="productId"></result>
		<result column="productName" property="productName"></result>
		<result column="goodsId" property="goodsId"></result>
		<result column="goodsName" property="goodsName"></result>
		<result column="groupName" property="groupName"></result>
		<result column="state" property="state"></result>
		<result column="isSwitch" property="isSwitch"></result>
		<result column="createDate" property="createDate"></result>
		<result column="modifyDate" property="modifyDate"></result>
		<result column="unitName" property="unitName"></result>
	</resultMap>

	<sql id="all_columns">
		id,
		name,
		switch_arr as switchArr,
		state,
		create_date,
		modify_date
	</sql>
	<sql id="all_Base_columns">
		 id,
		 group_id as groupId,
		 product_id as productId,
		 product_name as productName,
		 goods_id as goodsId,
		 goods_name as goodsName,
		 group_name as groupName,
		 state,
		 is_switch as isSwitch,
		 create_date as createDate,
		 modify_date as modifyDate
	</sql>

	<sql id="selete_columns">
		id,
		name
	</sql>

    <!-- 查询所有顶级分类 -->
	<select id="getParentTopList" resultMap="GoodsCategoryMap" parameterType="java.util.Map">	
		SELECT id,name 
		FROM dj_basics_goods_category 
		where parent_id=1
		ORDER BY create_date desc
	</select>
	
	<!-- 查询所有子分类 -->
	<select id="getChildList" resultMap="GoodsCategoryMap" parameterType="java.util.Map">	
		SELECT id,name 
		FROM dj_basics_goods_category 
		where parent_id=#{id}
		ORDER BY create_date desc
	</select>
	
	<!-- 根据分类id查询所有商品 -->
	<select id="getGoodsList" resultMap="GoodsCategoryMap" parameterType="java.util.Map">	
		SELECT id,name 
		FROM dj_basics_goods
		where category_id=#{id}
		ORDER BY create_date desc
	</select>
	
	<!-- 根据商品id查询所有货品 -->
	<select id="getProductList" resultMap="GoodsCategoryMap" parameterType="java.util.Map">	
		SELECT id,name 
		FROM dj_basics_product
		where goods_id=#{id}
		ORDER BY create_date desc
	</select>
	
	<!-- 新增关联组和货品关系-->
	<insert id="addGroupLink" parameterType="com.dangjia.acg.modle.basics.GroupLink">
		INSERT INTO dj_basics_group_link(
		id,
		group_id,
		product_id,
		product_name,
		goods_id,
		goods_name,
		group_name,
		state,
		is_switch,
		create_date,
		modify_date
		)
		VALUES (
		#{id},
		#{groupId},
		#{productId},
		#{productName},
		#{goodsId},
		#{goodsName},
		#{groupName},
		#{state},
		#{isSwitch},
		SYSDATE(),
		SYSDATE()
		)
	</insert>
	<!-- 根据关联组id删除货品关联关系 -->
	<delete id="deleteGroupLink" parameterType="java.lang.String">
		DELETE FROM dj_basics_group_link
		WHERE group_id=#{groupId}
	</delete>
	<!-- 根据关联组id删除货品关联关系 -->
	<delete id="deleteGroupLinkById" parameterType="java.lang.String">
		DELETE FROM dj_basics_group_link
		WHERE id=#{id}
	</delete>
	<!-- 根据关联组id和货品id修改关联关系-->
	<update id="updateGroupLink" parameterType="com.dangjia.acg.modle.basics.GroupLink">
		UPDATE dj_basics_group_link
		SET state=#{state},modify_date=#{modifyDate}
		where group_id=#{groupId}
		and  product_id=#{productId}
	</update>
	<!-- 根据关联组id查询关联货品关系 -->
	<select id="queryGroupLinkByGid" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where group_id=#{groupId}
		ORDER BY create_date desc
	</select>
	<!-- 根据关联组id查询关联货品关系 多返回了一个 unitName -->
	<!--<select id="queryMapGroupLinkByGid" resultType="com.dangjia.acg.modle.basics.GroupLink">-->
	<select id="queryMapGroupLinkByGid" resultMap="GoodsLinkMap" parameterType="java.util.Map">
		SELECT
		 g.id as id,
		 g.group_id as groupId,
		 g.product_id as productId,
		 g.product_name as productName,
		 g.goods_id as goodsId,
		 g.goods_name as goodsName,
		 g.group_name as groupName,
		 g.state as state,
		 g.is_switch as isSwitch,
		 g.create_date as createDate,
		 g.modify_date as modifyDate,
		 p.unit_name as unitName
		FROM dj_basics_group_link as g, dj_basics_product as p
		where group_id= #{groupId} and p.id = g.product_id
		ORDER BY g.create_date desc
	</select>
	<!-- 根据关联组id和货品id查询关联关系 -->
	<select id="queryGroupLinkByGidAndPid" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where group_id=#{groupId}
		and product_id=#{productId}
		ORDER BY create_date desc
	</select>

	<!-- 根据关联组id和货品id查询关联关系 -->
	<select id="queryGroupLinkByGroupIdAndPid" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where group_id=#{groupId}
		and product_id=#{productId}
		ORDER BY create_date desc
	</select>

	<!-- 根据货品id查询关联关系 -->
	<select id="queryGroupLinkByPid" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where
		product_id=#{productId}
		ORDER BY create_date desc
	</select>

	<!-- 根据商品id，查询对应的所有货品 -->
	<select id="queryGroupLinkByGoodsId" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where
		goods_id=#{goodsId}
		ORDER BY create_date desc
	</select>
	<!-- 根据货品id 和商品id查询关联关系 -->
	<select id="queryGroupLinkByPidAndGid" resultType="com.dangjia.acg.modle.basics.GroupLink">
		SELECT
		<include refid="all_Base_columns"/>
		FROM dj_basics_group_link
		where 1=1
		and product_id=#{productId}
		and goods_id=#{goodsId}
		ORDER BY create_date desc
	</select>

	<!--根据货品id修改所有关联组货品可切换性-->
	<update id="updateGLinkByPid">
        UPDATE dj_basics_group_link
		SET is_switch=#{isSwitch},modify_date=SYSDATE()
		where product_id=#{productId}
	</update>
</mapper>