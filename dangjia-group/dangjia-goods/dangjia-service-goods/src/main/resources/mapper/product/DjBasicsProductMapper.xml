<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dangjia.acg.mapper.product.DjBasicsProductMapper">

    <sql id="new_columns">
               id as id,
        name as name,
        goods_id as goodsId,
        category_id as categoryId,
        product_sn as productSn,
        image as image,
        unit_id as unitId,
        label_id as labelId,
        unit_name as unitName,
        type as type,
        istop,
        price as price,
        other_name as otherName
    </sql>

    <!-- 查询当前添加商品的属性值是否已被用(存在相关属性值的商品) -->
    <select id="getPListByValueIdArr" resultType="com.dangjia.acg.modle.product.DjBasicsProduct">
        select
        p.id as id,
        p.name as name,
        p.goods_id as goodsId,
        p.category_id as categoryId,
        p.product_sn as productSn,
        p.image as image,
        p.unit_id as unitId,
        p.label_id as labelId,
        p.unit_name as unitName,
        p.type as type,
        p.istop,
        p.price as price,
        p.other_name as otherName
        from dj_basics_product p,dj_basics_product_material p1
        where
        p.id = p1.product_id
        and type=1 and maket=1
        <if test="valueIdArr!=null and valueIdArr!=''">
            and p1.value_id_arr=#{valueIdArr}
        </if>
    </select>

    <!-- 根据名称查询 -->
    <select id="queryByName" parameterType="java.lang.String" resultType="com.dangjia.acg.modle.product.DjBasicsProduct">
        SELECT
        <include refid="new_columns"/>
        FROM dj_basics_product
        where data_status = 0
        <if test="name!=null and name!=''">
            and
            name=#{name}
        </if>
        ORDER BY istop DESC,create_date desc
    </select>

    <!-- 根据货号查询 -->
    <select id="queryByProductSn" parameterType="java.lang.String" resultType="com.dangjia.acg.modle.product.DjBasicsProduct">
        SELECT
        <include refid="new_columns"/>
        FROM dj_basics_product
        where data_status = 0
        <if test="productSn!=null and productSn!=''">
            and
            product_sn=#{productSn}
        </if>
        ORDER BY istop DESC,create_date desc
    </select>

    <!-- 根据材料商品编号查询  营销名称-->
        <select  id ="queryProductMaterial"  parameterType="java.lang.String"    resultType="com.dangjia.acg.dto.product.AppBasicsProductDTO">
            select
            p.id,p.name,p.goods_id,p.category_id,p.product_sn,p.image,
            p.unit_name,p.unit_id,p.label_id,p.type,p.maket,p.price,p.other_name,
            p.istop,p.remark  ,m.marketing_name,b.name as attributeIdArr   from dj_basics_product  p left join  dj_basics_product_material m on  p.id=m.product_id
            left join dj_basics_attribute b on b.id=m.value_id_arr

            <if test="productSn!=null and productSn!=''">
                and
                p.product_sn=#{productSn}
            </if>
            ORDER BY p.istop DESC,p.create_date desc
        </select>
    <!-- 根据人工商品编号查询  没有规格、没有营销名称-->
        <select  id ="queryProductWorker" parameterType="java.lang.String" resultType="com.dangjia.acg.dto.product.AppBasicsProductDTO">
            select
            p.id,p.name,p.goods_id,p.category_id,p.product_sn,p.image,
            p.unit_name,p.unit_id,p.label_id,p.type,p.maket,p.price,p.other_name,
            p.istop,p.remark,'' as marketing_name ,'' as attributeIdArr  from dj_basics_product  p left join dj_basics_product_worker w on p.id=w.product_id
            <if test="productSn!=null and productSn!=''">
             and
             p.product_sn=#{productSn}
            </if>
            ORDER BY p.istop DESC,p.create_date desc
        </select>

    <!--  按照 属性id 和属性值查找商品 -->
    <select id="getPListByValueIdArrOrAttrId" resultType="com.dangjia.acg.modle.product.DjBasicsProduct">
        select
        p.id as id,
        p.name as name,
        p.goods_id as goodsId,
        p.category_id as categoryId,
        p.product_sn as productSn,
        p.image as image,
        p.unit_id as unitId,
        p.label_id as labelId,
        p.unit_name as unitName,
        p.type as type,
        p.price as price,
        p.istop,
        pm.brand_id as brandId,
        pm.brand_series_id as brandSeriesId,
        pm.attribute_id_arr AS attributeIdArr,
        pm.value_name_arr AS valueNameArr,
        pm.value_id_arr AS valueIdArr
        from dj_basics_product p
        INNER JOIN dj_basics_product_material pm
        on p.id=pm.product_id
        where
        p.type=1 and p.maket=1
        <if test="attributeIdArr!=null and attributeIdArr!=''">
            and FIND_IN_SET(#{attributeIdArr},pm.attribute_id_arr)
        </if>
        <if test="valueIdArr!=null and valueIdArr!=''">
            and FIND_IN_SET(#{valueIdArr},pm.value_id_arr)
        </if>
    </select>

    <!--更新货品属性-->
    <update id="updateProductValueId" parameterType="java.lang.String">
        UPDATE `dj_basics_product_material` pm
        SET pm.value_name_arr =
          ( SELECT GROUP_CONCAT( v.NAME ) FROM dj_basics_attribute_value v WHERE FIND_IN_SET( v.id, pm.value_id_arr ) )
        WHERE
        FIND_IN_SET(#{valueId}, pm.value_id_arr )
    </update>
</mapper>